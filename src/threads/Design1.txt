CIS 520 Programming Project #1

---- GROUP ----

Jack McKenzie <jemckenzie@ksu.edu>
Branden Bearden <bbearden@ksu.edu>





---- PRELIMINARIES ----

We would like to thank the TA's, and especially Dr. Andresen for dedicating extra time outside of normal Office Hours in order to help clarify some of the more confusing concepts for us.  It helped us greatly in both our design as well as
preparing us for further exams.

Citations:
We based some pieces of our solution on various solutions online, these helped us understand some of the 
functionality of the functions within thread.c.  These solutions include:
	https://github.com/Waqee/Pintos-Project-1
	https://github.com/meskuwa/pintos-project-1

We also consulted some online documentation for Pintos, which explains succinctly via Doxygen some of the functionality of the functions within the OS, and may be useful for further projects/other groups:
	https://jhu-cs318.github.io/pintos-doxygen/html/
	

	
	
	
	
						ALARM CLOCK
						===========

---- DATA STRUCTURES ----



A1: Copy here the declaration of each new or changed 'struct' or 'struct' member, global or static variable, 'typedef', or enumeration.  Identify the purpose of each in 25 words or less.

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    struct list_elem allelem;           /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

    /* ADDED CODE */
    int64_t wake_time;       /* The number of ticks until the thread should "wake up"(unblock? ) */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };
  
* The thread struct was changed in order to include priority(for part 2 later on) as well as wake_time in order to sort the sleeping_list.


enum thread_status
  {
    THREAD_RUNNING,     /* Running thread. */
    THREAD_SLEEP,
    THREAD_READY,       /* Not running but ready to run. */
    THREAD_BLOCKED,     /* Waiting for an event to trigger. */
    THREAD_DYING        /* About to be destroyed. */
  };
  
* We added code in order to add a SLEEPING_STATE, we did not use it, we used thread_block() function in its place.





---- ALGORITHMS ----



A2: Briefly describe what happens in a call to your timer_sleep(), including the effects of the timer interrupt handler.

Our call to timer_sleep() simply makes a call to thread_sleep().  thread_sleep() is a function we defined that is used to check that the current thread's status is not idle(it has tasks to complete).  If it is not idle,
we set the thread's wake_time member to be equal to the current number of timer_ticks() on the system, and add the ticks integer that we passed in.  This indicates the time until the thread needs to be woken up.  It is then placed
into an ordered list of sleeping/blocked threads called sleeping_list, which is sorted by its wake time.  We then block the thread using thread_block(), which puts the thread to sleep.  All of this happens with interrupts turned off,
and after this process is complete, the interrupt is reset to its previous level.



A3: What steps are taken to minimize the time spent in the timer_interrupt() handler?

The steps we took in order to minimize time spent in the interrupt was to simply call a function we defined
called thread_wake() in the handler.  This function simply checks the contents of the sleeping_list(if it's nonempty)
and checks to see if the first thread in the list(the one with the lowest wake_time) has hit its specified number of
timer ticks.  If it has hit its ticks, we remove it from the list and unblock it using thread_unblock(), transitioning
it to the ready state and adding to the ready list in order.  If the sleeping_list is empty, we simply exit and allow
the system to continue.





---- SYNCHRONIZATION ----


A4: How are race conditions avoided when multiple threads call timer_sleep() simultaneously?

Race conditions are avoided in our case by turning interrupts off within our thread_sleep function(calling this function is all our timer_sleep() does.  This allows the current_thread that is running to check itself,
set its wake time, and add it to the sleeping_list in order without another thread interrupting this operation, which could otherwise affect the ordering of the list, or the setting of incorrect wake_times.




A5: How are race conditions avoided when a timer interrupt occurs during a call to timer_sleep()?

We avoid race conditions in a very similar fashion to that of thread_sleep().  We use our thread_wakeup() function to turn off interrupts while within the critical section.  This allows us to correctly pop the head element
off the sleeping list and check its wake time.  If it meets the condition, we unblock it and place it in the ready queue, otherwise we exit.  After this section is executed,
we re-enable interrupts upon exiting the critical section.  






---- RATIONALE ----

A6: Why did you choose this design?  In what ways is it superior to other designs that you considered?

We choose this design primarily due to the modularity of its functionality.  We originally tried implementing the design suggested in the PDF posted on Canvas, but had trouble with the current_thread not being in the running state, 
and then with infinite looping somewhere after attempting some design fixes.  This proved hard to debug as the functionality of thread_sleep() was closely tied to the schedule() function.  In order to make this easier to debug,
we decided to try another implementation, with more use of the built-in functionality of the Operating System bones that we were given.  We were able to change the functionality of our thread_sleep() and thread_wakeup() functions
such that they are simply a call within another function.  This allowed for easier debugging as well as increased understanding for our team.  

